package org.example.styler.structure.handler;

import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.TerminalNode;
import org.example.parser.common.MyParser;
import org.example.parser.common.factory.TreeNodeFactoryGetter;
import org.example.parser.common.factory.context.TreeNodeFactory;
import org.example.styler.structure.EquivalentStructure;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * @description
 * @author       Yingying Jiang
 * @create       2024/4/13 14:40
 */
public class OpOpAssignConvertHandler extends Handler{
	static private Map<String, String> convertMap = new HashMap<>();
	static {
		convertMap.put("*", "*=");
		convertMap.put("*=", "*");
		convertMap.put("/", "/=");
		convertMap.put("/=", "/");
		convertMap.put("%", "%=");
		convertMap.put("%=", "%");

		convertMap.put("&", "&=");
		convertMap.put("&=", "&");
		convertMap.put("|", "|=");
		convertMap.put("|=", "|");
		convertMap.put("^", "^=");
		convertMap.put("^=", "^");

	}
	public OpOpAssignConvertHandler(String[][] argsList) {
		super(argsList);
	}

	/**
	 * convert from the ParseTree generated by holderName1 to holderName2
	 * @param structure
	 * @param args [holderName1, holderName2]
	 * @param parser
	 */
	@Override
	protected void doHandle(EquivalentStructure structure, List<String> args, MyParser parser) {
		String holderNameFrom = args.get(0), holderNameTo = args.get(1);
		List<ParseTree> fromTrees = structure.getVNode(holderNameFrom).matchedTrees;
		List<ParseTree> toTrees = structure.getVNode(holderNameTo).matchedTrees = new ArrayList<>(fromTrees);
		for (int i = 0; i < fromTrees.size(); i++) {
			ParseTree tree = fromTrees.get(i);
			if(tree instanceof TerminalNode ter) {
				String convertedOp = convertMap.get(ter.getSymbol().getText());
				if (convertedOp != null) {
					TreeNodeFactory factory = TreeNodeFactoryGetter.getFactory(parser);
					toTrees.set(i, factory.createTerminal(parser.getTokenFactory().create(parser.getType(convertedOp), convertedOp)));
				}
			}
		}
	}

}
